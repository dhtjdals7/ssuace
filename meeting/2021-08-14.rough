2021-08-14

# 개발
entity service repository 최신트렌드
Mockito로 테스트코드 짜기
autowired -> private final 지정하고 생성자에다가 클래스에다가 어노테이션으로 리콰이어드
@RequiredArgsConstructor(롬복)
부트스트랩으로 무료라이센스 이용
코드스타일 통일을 위한 컨벤션적용   구글에 자바 코드스타일 검색
프론트엔드 코드컨벤션 - 에어비엔비 자바스크립트 타입 참조
ajax -> axios


# 스터디
service가 repository를 제대로 주입받는지 확인하려면 test안에 @Test public void inject() assertNotNull(Service.getDoikRepository());
TDD -> DDD(개발방법론) DDD->테스트코드를 먼저짜고 비즈니스로직을 짠다
edu.nextstep.camp(우아한형제들)
스프링과 부트의 차이, 인터페이스와 추상클래스의 차이
가장 좋은 방법:GitHub운영
개발자 says by code
내가 짜는 코드 한줄한줄은 면접관이 보는 코드다 -장도익-
현재 내가 하고있는 것에 대해서는 깊게 알아야함(무언가 하나에 대해서 깊게 아는 것 중요)
TIL(Today I Learned)
(포트폴리오를 만들때 테스트코드가 필수다) -> 면접관들 중에서 깃헙 레퍼지토리를 받고 테스트코드가 없으면 보지도않음
스프링 등은 비즈니스를 수행하는데 있어서 한도구들 중 하나일뿐 오히려 자바
기본적인 CS 운영체제 자료구조 DB 계속 준비를 해둘것
면접에서 물어보는 내용은 다 거기서 거기다. 해당 기술을 써보지 않았어도 준비가 가능하다


# 추후과제
프론트와 백에서 동시권한체크(어드민)
메소드 리팩토링
로그인 JWT (rest api 콜할때 토큰을 보내서 유효하면 가는거고 토큰의 만료여부 체크)
vuejs + springboot 프론트엔드의 패키지는 npm으로 관리한다(타임리프 단점 -> 프론트를 분리해서 해야 퀄리티가 좋은데 관리가 힘들다.)
생산성을 위해서 데드라인을 정하는 것이 좋다.
깃 레퍼지토리 재생성
mariadb 도커이미지


# 기타
마크다운 문서에 url은 파일url
롤비?
